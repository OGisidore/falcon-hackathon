 # if img is not None:
    #     # Save the captured image to a file
    #     # with open("captured_image.png", "wb") as f:
    #     #     f.write(img.getbuffer())

    #     # Function to query the model
    #     def query(filename):
    #         with open(filename, "rb") as f:
    #             data = f.read()
    #         response = requests.post(API_URL, headers=headers, data=data)
    #         return response.json()

    #     # Perform the object detection query
    #     output = query(img  )
    #     return output
    
    # def process_image():
    # Vérifiez si un fichier image est inclus dans la requête
    # if 'image' not in request.files:
    #     return jsonify({"error": "No image file found"}), 400

    # image = request.files['image']
    # img_path = os.path.join("uploads", image.filename)
    # image.save(img_path)

    # Chargez l'image
    img = cv2.imread(image)
    if img is None:
        return jsonify({"error": "Image not found or unable to open."}), 400

    # Effectuez la requête de détection d'objet
    output = query(img_save_path)

    if 'error' in output:
        return jsonify({"error": output['error']}), 400

    # Lecture du fichier CSV avec pandas
    index = ["color", "color_name", "hex", "R", "G", "B"]
    csv = pd.read_csv('colors.csv', names=index, header=None)

    # Traitement de chaque objet détecté
    object_colors = []
    for label, box in output:
        x1, y1, x2, y2 = box['xmin'], box['ymin'], box['xmax'], box['ymax']
        x1, y1, x2, y2 = max(0, x1), max(0, y1), min(img.shape[1], x2), min(img.shape[0], y2)
        roi = img[y1:y2, x1:x2]

        color_count = detect_colors_in_roi(roi, csv)
        object_colors.append({
            "object": label,
            "colors": list(color_count.keys())
        })

    return jsonify({"objects": object_colors})